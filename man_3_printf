.TH printf 3 "January 2025" "Version 1.0" "Library functions"
.SH NAME
printf \- produces output according to a format
.SH SYNOPSIS
.B int _printf(const char *format, ...);
.SH DESCRIPTION
The function
.B _printf
produces output according to the format string specified in the
.B format
argument. The format string may contain the following specifiers:

.TP
.B %c
Prints a character.

.TP
.B %s
Prints a string.

.TP
.B %d, %i
Prints an integer in decimal format.

.TP
.B %%
Prints a percent sign (`%').

The function supports the following format specifiers:
- %c: A single character.
- %s: A string.
- %d: A signed integer in decimal.
- %i: A signed integer in decimal.
- %%: A literal percent sign.
Note that the function does not support flag characters, field width, or precision.

The function can handle both positive and negative integers, as well as the `NULL` string value (which is printed as "(null)"). The behavior of `_printf` is similar to the standard C `printf` function.

.SH RETURN VALUE
The function returns the number of characters printed (excluding the null byte used to end output to strings). If there is an error, it returns a negative value.

.SH EXAMPLES
Here is an example of how to use the _printf function:

.EX
$ _printf("Hello, %s!\n", "World");
Hello, World!
$ _printf("Number: %d\n", 42);
Number: 42
$ _printf("Character: %c\n", 'A');
Character: A
$ _printf("Percent sign: %%\n");
Percent sign: %
.EX

.SH SEE ALSO
printf(3), write(2), stdarg(3)

